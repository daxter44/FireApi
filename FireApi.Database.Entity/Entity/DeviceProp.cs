// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using FireApi.Database.Entity;
//
//    var deviceProp = DeviceProp.FromJson(jsonString);

namespace FireApi.Database.Entity
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using FireApi.Database.Entity.Entity.Device.Fields;
    using FireApi.Database.Entity.Entity.Devices.Devices;
    using FireApi.Database.Entity.MongoDoc;
    using MongoDB.Bson.Serialization.Attributes;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    [BsonIgnoreExtraElements]
    [BsonCollection("deviceProp")]
    public partial class DeviceProp : Document
    {
        [JsonProperty("The700", NullValueHandling = NullValueHandling.Ignore)]
        public The700 The700 { get; set; }

        [JsonProperty("vr_70", NullValueHandling = NullValueHandling.Ignore)]
        public Vr70 Vr70 { get; set; }
    }

    public partial class DeviceProp
    {
        public static DeviceProp FromJson(string json) => JsonConvert.DeserializeObject<DeviceProp>(json, FireApi.Database.Entity.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this DeviceProp self) => JsonConvert.SerializeObject(self, FireApi.Database.Entity.Converter.Settings);
    }


    public enum Name { Empty, Error, From, To };

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NameConverter.Singleton,
                ValueConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Name.Empty;
                case "error":
                    return Name.Error;
                case "from":
                    return Name.From;
                case "to":
                    return Name.To;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            switch (value)
            {
                case Name.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Name.Error:
                    serializer.Serialize(writer, "error");
                    return;
                case Name.From:
                    serializer.Serialize(writer, "from");
                    return;
                case Name.To:
                    serializer.Serialize(writer, "to");
                    return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Value) || t == typeof(Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Value { Double = doubleValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Value { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Value)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }
}


